apt-get update -y && apt update -y && apt-get upgrade -y && apt upgrade -y && apt install aptitude -y && aptitude full-upgrade -y

sh <(curl -L https://nixos.org/nix/install)  --daemon 


Multi-user installation:
sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon

Single-user installation:
sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --no-daemon




. ~/.nix-profile/etc/profile.d/nix.sh

echo '. "$HOME/.nix-profile/etc/profile.d/nix.sh"' >> ~/.bashrc

which nix

sh <(curl -L https://nixos.org/nix/install)  --daemon

mkdir -p ~/.config/nix  

echo "experimental-features = nix-command  

flakes" >> ~/.config/nix/nix.conf 

nix-channel --add https://nixos.org/channels/nixos-24.05 nixpkgs

nix-channel --update 

nix-channel --list




nano /root/.config/nix/nix.conf

experimental-features = nix-command flakes




nano shell.nix

{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  buildInputs = [
    pkgs.nodejs_20
  ];
}



nix-shell

node --version

which node 

nix shell nixpkgs#go_1_21 


What /nix/store is
It’s a content-addressed store where Nix puts all packages, build results, and dependencies.


nix-collect-garbage -d

Because the Nix store grows over time, you can clean up unused packages  with:  nix-collect-garbage 





nano shell.nix



{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  buildInputs = [
    pkgs.nodejs_20
    pkgs.yarn
  ];
}


nix-shell




let
  pkgs = import <nixpkgs> {};
in
pkgs.mkShell {
  buildInputs = [
    pkgs.nodejs_20
    pkgs.yarn
  ];
}






nix search nixpkgs nodejs 




nix-env -iA nixpkgs.nodejs_20


nix-env → Nix’s per-user package manager. Installs packages into your user profile (~/.nix-profile).
-iA → Install by attribute path.
-i = install
-A = attribute, e.g., nixpkgs.nodejs_20
Advantages: unambiguous, faster, works across channels.
Links the package from /nix/store into your ~/.nix-profile.



nix-shell -p nodejs_20 yarn

nix-shell → Starts a temporary development shell.
-p → Specifies packages to include in this shell:
nodejs_20 → Node.js 20.x
yarn → Yarn package manager

nix-shell -p nodejs_20 yarn git python3





nano shell.nix


{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  buildInputs = [
    pkgs.nodejs_20
    pkgs.yarn
  ];
}






let
  pkgs = import (builtins.fetchTarball {
    url = "https://github.com/NixOS/nixpkgs/archive/nixos-24.05.tar.gz";
  }) {};
in
pkgs.mkShell {
  buildInputs = [
    pkgs.nodejs_20
    pkgs.yarn
  ];
}




nix-shell



nix build -f shell.nix



nix build → Tells Nix to build a derivation.
-f shell.nix → Points Nix to your Nix expression file (shell.nix) instead of a default location.
Nix evaluates shell.nix and builds the environment defined there.


./result/bin/node --version


nix-channel --update


nix-collect-garbage
nix-collect-garbage -d



System-wide installation (optional)
sudo nix-env -iA nixpkgs.nodejs_20
sudo nix-env -iA nixpkgs.yarn
Installs into /nix/var/nix/profiles/system or root profile.
Make sure /etc/profile.d/nix.sh is sourced for all users.


# User profile
nix profile install nixpkgs#nodejs_20 nixpkgs#yarn

# System profile
sudo nix profile install nixpkgs#nodejs_20 nixpkgs#yarn


nix-shell = temporary, ephemeral → disappears when you exit.
nix-env or nix profile install = permanent → stays in your environment.



. $HOME/.nix-profile/etc/profile.d/nix.sh



nix-env -iA nixpkgs.docker


nix profile install nixpkgs#docker


which dockerd
# or
ls ~/.nix-profile/bin/dockerd



sudo /root/.nix-profile/bin/dockerd &

/root/.nix-profile/bin/dockerd

sudo env "PATH=$PATH" dockerd &



